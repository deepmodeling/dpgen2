import os, sys, json
package_root = '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp/inputs/artifacts/dflow_python_packages'
catalog_dir = os.path.join(package_root, '.dflow')
if os.path.exists(catalog_dir):
    for f in os.listdir(catalog_dir):
        with open(os.path.join(catalog_dir, f), 'r') as fd:
            for item in json.load(fd)['path_list']:
                sys.path.insert(0, os.path.join(package_root, os.path.dirname(item['dflow_list_item'])))
import json
from dflow import config, s3_config
config.update(json.loads('{"host": null, "token": null, "k8s_config_file": null, "k8s_api_server": null, "private_key_host_path": "/home/docker/.ssh", "save_path_as_parameter": false, "catalog_dir_name": ".dflow", "archive_mode": "tar", "util_image": "python:3.8", "util_image_pull_policy": null, "extender_image": "dptechnology/dflow-extender", "extender_image_pull_policy": null, "dispatcher_image": "dptechnology/dpdispatcher", "dispatcher_image_pull_policy": null, "save_keys_in_global_outputs": true, "mode": "debug"}'))
s3_config.update(json.loads('{"endpoint": null, "console": "http://127.0.0.1:9001", "access_key": "admin", "secret_key": "password", "secure": false, "bucket_name": "my-bucket"}'))
import os, sys, traceback, jsonpickle
from dflow.python import OPIO, TransientError, FatalError
from dflow.python.utils import handle_input_artifact, handle_input_parameter
from dflow.python.utils import handle_output_artifact, handle_output_parameter
from mocked_ops import MockedRunDPTrain

op_obj = MockedRunDPTrain()
input = OPIO()
input_sign = MockedRunDPTrain.get_input_sign()
input['config'] = handle_input_parameter('config', r'''{}''', input_sign['config'], None, '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
input['task_name'] = handle_input_parameter('task_name', r'''["task.0000", "task.0001", "task.0002"]''', input_sign['task_name'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
input['task_path'] = handle_input_artifact('task_path', input_sign['task_path'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
input['init_model'] = handle_input_artifact('init_model', input_sign['init_model'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
input['init_data'] = handle_input_artifact('init_data', input_sign['init_data'], None, '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
input['iter_data'] = handle_input_artifact('iter_data', input_sign['iter_data'], None, '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
try:
    output = op_obj.execute(input)
except TransientError:
    traceback.print_exc()
    sys.exit(1)
except FatalError:
    traceback.print_exc()
    sys.exit(2)
os.makedirs('/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp/outputs/parameters', exist_ok=True)
os.makedirs('/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp/outputs/artifacts', exist_ok=True)
output_sign = MockedRunDPTrain.get_output_sign()
handle_output_artifact('script', output['script'], output_sign['script'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
handle_output_artifact('model', output['model'], output_sign['model'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
handle_output_artifact('lcurve', output['lcurve'], output_sign['lcurve'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
handle_output_artifact('log', output['log'], output_sign['log'], int('0000'), '/root/python/dpgen2/dpgen-e4lz5/iter-000001--run-train-0000/workdir/tmp')
