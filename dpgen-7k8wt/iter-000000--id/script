import os, sys, json
package_root = '/root/python/dpgen2/dpgen-7k8wt/iter-000000--id/workdir/tmp/inputs/artifacts/dflow_python_packages'
catalog_dir = os.path.join(package_root, '.dflow')
if os.path.exists(catalog_dir):
    for f in os.listdir(catalog_dir):
        with open(os.path.join(catalog_dir, f), 'r') as fd:
            for item in json.load(fd)['path_list']:
                sys.path.insert(0, os.path.join(package_root, os.path.dirname(item['dflow_list_item'])))
import json
from dflow import config, s3_config
config.update(json.loads('{"host": null, "token": null, "k8s_config_file": null, "k8s_api_server": null, "private_key_host_path": "/home/docker/.ssh", "save_path_as_parameter": false, "catalog_dir_name": ".dflow", "archive_mode": "tar", "util_image": "python:3.8", "util_image_pull_policy": null, "extender_image": "dptechnology/dflow-extender", "extender_image_pull_policy": null, "dispatcher_image": "dptechnology/dpdispatcher", "dispatcher_image_pull_policy": null, "save_keys_in_global_outputs": true, "mode": "debug"}'))
s3_config.update(json.loads('{"endpoint": null, "console": "http://127.0.0.1:9001", "access_key": "admin", "secret_key": "password", "secure": false, "bucket_name": "my-bucket"}'))
import os, sys, traceback, jsonpickle
from dflow.python import OPIO, TransientError, FatalError
from dflow.python.utils import handle_input_artifact, handle_input_parameter
from dflow.python.utils import handle_output_artifact, handle_output_parameter
from dpgen2.flow.dpgen_loop import MakeBlockId

op_obj = MakeBlockId()
input = OPIO()
input_sign = MakeBlockId.get_input_sign()
input['exploration_scheduler'] = handle_input_parameter('exploration_scheduler', r'''{"py/object": "dpgen2.exploration.scheduler.scheduler.ExplorationScheduler", "stage_schedulers": [{"py/object": "mocked_ops.MockedConstTrustLevelStageScheduler", "selector": {"py/object": "mocked_ops.MockedConfSelector", "trust_level": {"py/object": "dpgen2.exploration.selector.trust_level.TrustLevel", "_level_f_lo": 0.1, "_level_f_hi": 0.3, "_level_v_lo": null, "_level_v_hi": null}}, "stage": {"py/object": "mocked_ops.MockedStage", "explor_groups": []}, "conv_accuracy": 0.7, "max_numb_iter": 2, "fatal_at_max": true, "nxt_iter": 2, "conv": true, "reached_max_iter": false, "complete_": true, "reports": [{"py/object": "mocked_ops.MockedExplorationReport", "failed": 0.1, "candidate": 0.1, "accurate": 0.8}]}, {"py/object": "mocked_ops.MockedConstTrustLevelStageScheduler", "selector": {"py/object": "mocked_ops.MockedConfSelector", "trust_level": {"py/object": "dpgen2.exploration.selector.trust_level.TrustLevel", "_level_f_lo": 0.2, "_level_f_hi": 0.4, "_level_v_lo": null, "_level_v_hi": null}}, "stage": {"py/object": "mocked_ops.MockedStage1", "explor_groups": []}, "conv_accuracy": 0.7, "max_numb_iter": 2, "fatal_at_max": true, "nxt_iter": 1, "conv": false, "reached_max_iter": false, "complete_": false, "reports": []}], "cur_stage": 1, "iteration": 1, "complete_": false}''', input_sign['exploration_scheduler'], None, '/root/python/dpgen2/dpgen-7k8wt/iter-000000--id/workdir/tmp')
try:
    output = op_obj.execute(input)
except TransientError:
    traceback.print_exc()
    sys.exit(1)
except FatalError:
    traceback.print_exc()
    sys.exit(2)
os.makedirs('/root/python/dpgen2/dpgen-7k8wt/iter-000000--id/workdir/tmp/outputs/parameters', exist_ok=True)
os.makedirs('/root/python/dpgen2/dpgen-7k8wt/iter-000000--id/workdir/tmp/outputs/artifacts', exist_ok=True)
output_sign = MakeBlockId.get_output_sign()
handle_output_parameter('block_id', output['block_id'], output_sign['block_id'], None, '/root/python/dpgen2/dpgen-7k8wt/iter-000000--id/workdir/tmp')
