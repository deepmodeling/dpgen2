import os, tempfile, re
from pathlib import (
  Path,
)
from typing import (
  List,
  Optional,
  Union,
)

from dpgen2.utils import (
  run_command, set_directory,
)

from .conf_sampling_task_group import (
  ConfSamplingTaskGroup,
)
from .lmp import (
  make_lmp_input,
)
from .task import (
  ExplorationTask,
  ExplorationTaskGroup,
)
from .lmp_template_task_group import (
  LmpTemplateTaskGroup,
)
from dpgen2.constants import (
  lmp_conf_name,
  lmp_input_name,
  plm_input_name,
  model_name_pattern,
)

class CustomizedLmpTemplateTaskGroup(ConfSamplingTaskGroup):
  def __init__(
      self,
  ):
    super().__init__()
    self.lmp_set = False
    self.plm_set = False

  def set_lmp(
      self,
      numb_models: int,
      lmp_template_fname: str,
      plm_template_fname: Optional[str] = None,
      revisions: dict = {},
      traj_freq: int = 10,
      custom_shell_commands: List[str] = None,
      custom_extra_files: List[str] = [],
      custom_output_pattern: Union[str,List[str]] = "*",
      custom_lmp_input_conf_fname: str = lmp_conf_name,
      custom_lmp_output_conf_fname: str = lmp_conf_name,
      custom_lmp_input_fname: str = lmp_input_name,
      custom_plm_input_fname: str = plm_input_name,
  ) -> None:
    r"""Set lammps task.

    Parameters
    ----------
    numb_models: int
        Number of models
    lmp_template_fname: str
        Template file name of lammps input
    plm_template_fname: str
        Template file name of the plumed input
    revisions: dict
        Revision dictionary. Provided in {key: [enumerated values]} format
    traj_freq: int
        Frequency along trajectory of checking model deviation
    custom_shell_commands: str
        Customized shell commands to be run for each configuration.
        The commands require `custom_lmp_input_fname` as input conf file
        and `custom_extra_files` as input.
        By running the commands a series folders in pattern 
        `custom_output_pattern` are supposed to be generated,
        and each folder is supposed to contain a configuration file
        `custom_lmp_conf_fname`, a lammps input file `custom_lmp_input_fname`
        and a plumed input file `custom_plm_input_fname`.
    custom_extra_files: List[str]
        Extra files that may be needed to execute the shell commands
    custom_output_pattern: Union[str, List[str]]
        Pattern of resultant folders generated by the shell commands.
    custom_lmp_input_conf_fname: str
        Generated conf file name
    custom_lmp_output_conf_fname: str
        Generated conf file name
    custom_lmp_input_fname: str
        Generated lmp input file name
    custom_plm_input_fname: str
        Generated plm input file name

    """
    self.numb_models = numb_models
    self.lmp_template = Path(lmp_template_fname).read_text().split("\n")
    self.revisions = revisions
    self.traj_freq = traj_freq
    self.has_plm = plm_template_fname is not None
    self.do_custom = custom_shell_commands is not None
    if not self.do_custom:
      raise RuntimeError(
        "no customized shell command is found, please provide at least 1 "
        "or use LmpTemplateTaskGroup instead"
      )

    self.lmp_template_fc = Path(lmp_template_fname).read_text()    
    self.plm_template_fc = Path(plm_template_fname).read_text()\
      if self.has_plm else None
    self.lmp_template_fn = Path(custom_lmp_input_fname) \
         if custom_lmp_input_fname is not None \
         else Path(lmp_template_fname.name)
    if self.has_plm:
      self.plm_template_fn = Path(custom_plm_input_fname) \
         if custom_plm_input_fname is not None \
         else Path(plm_template_fname.name)
    
    self.custom_extra_files = custom_extra_files
    self.custom_extra_files.append(lmp_template_fname)
    if self.has_plm:
      self.custom_extra_files.append(plm_template_fname)
    if custom_shell_commands is not None:
      self.custom_extra_files = [ii.name for ii in custom_extra_files]
      self.custom_extra_file_contents = [Path(ii).read_text() for ii in custom_extra_files]\
        if custom_extra_files is not None else []
    self.custom_shell_commands = custom_shell_commands
    self.custom_output_pattern = custom_output_pattern
    if type(self.custom_output_pattern) is str:
      self.custom_output_pattern = [self.custom_output_pattern]
    self.custom_lmp_input_conf_fname = custom_lmp_input_conf_fname
    self.custom_lmp_output_conf_fname = custom_lmp_output_conf_fname
    self.custom_lmp_input_fname = custom_lmp_input_fname
    self.custom_plm_input_fname = custom_plm_input_fname

    self.lmp_set = True
    self.plm_set = True if self.has_plm else False
    
  def make_task(
      self,
  ) -> ExplorationTaskGroup:    
    if not self.conf_set:
      raise RuntimeError("confs are not set")
    if not self.lmp_set:
      raise RuntimeError("Lammps template and revisions are not set")    

    confs = self._sample_confs()    
    for cc in confs:
      self._make_customized_task_group(cc)

    return self

  def _make_customized_task_group(
      self,
      conf,
  ) -> ExplorationTaskGroup:
    with tempfile.TemporaryDirectory() as tmpdir:
      with set_directory(Path(tmpdir)):
        Path(self.custom_lmp_input_conf_fname).write_text(conf)
        # copy all customized files
        for ff,cc in zip(self.custom_extra_files, self.custom_extra_file_contents):
          Path(ff).write_text(cc)
        # run all customized shell commands
        for ss in self.custom_shell_commands:
          # run shell command with os.system
          ret = os.system(ss)
          if ret != 0:
            raise RuntimeError(
              f"execution of {ss} returns a non-zero value {ret}"
            )
        # loop over all pattern matched result dirs
        for ff in [ii for ii in sorted(os.listdir(os.getcwd()))
                   if Path(ii).is_dir()]:
          matched_ff = None
          for pp in self.custom_output_pattern:
            if re.match(pp, ff):
              matched_ff = ff
              break
          # no matched continue
          if matched_ff is None:
            continue
          with set_directory(Path(matched_ff)):
            lmp_tgroup = LmpTemplateTaskGroup()
            lmp_tgroup.set_lmp(
              self.numb_models,
              self.custom_lmp_input_fname,
              self.custom_plm_input_fname,
              revisions = self.revisions,
              traj_freq = self.traj_freq,
            )
            conf_fc = Path(self.custom_lmp_output_conf_fname).read_text()
            lmp_tgroup.set_conf([conf_fc], 1, )
            self.add_group(lmp_tgroup.make_task())          
    return self


      
        
